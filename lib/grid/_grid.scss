////
///
/// Grid System
///
/// @group Grid
/// @since 1.0.0
///
////



///
/// Grid config array.
///
/// @prop {String} grid -  Name of the grid
/// @prop {Number} grid.columns -  Count of columns for the grid
/// @prop {Number} grid.gutter -  Gutter value in %, em or px
/// @prop {bool} grid.column-first - Indicator if row starts with a column
///
/// @type array
/// @example scss - Set up two grids
/// $grid-config: (
///     'default': (
///         'columns': 12,
///         'gutter': 1.5%,
///         'column-first': true
///     ),
///     'grid-2': (
///         'columns': 10,
///         'gutter': 2%,
///         'column-first': false
///     ),
/// );
///
$grid-config: (
    'default': (
        'columns': 12,
        'gutter': 1.5%,
        'column-first': true
    )
) !default;



///
/// Default grid declaration. Used as default in grid mixins when no grid is definied.
/// @type string
///
$default-grid: 'default' !default;



///
/// Fallback grid config declaration. Only used for fallback params in the grid.
///
/// Not recommendable to change. Use "$default-grid" instead.
///
/// @type array
///
$fallback-grid-config: (
    'columns': 12,
    'gutter': 1.5%,
    'column-first': true
) !default;



///
/// Defines, if the push and pull mixins affect the following grid elements.
/// @type boolean
///
$default-grid-push-pull-affects-followers: false !default;



///
/// Get the data set of a grid.
///
/// @param {string} $grid-name [$default-grid] - [`optional`] Name of the grid, default is the $default-grid
/// @param {array} $grid-array [$grid-config] - [`optional`] Deviant grid config, default is the $grid-config array
///
/// @return {array} Data set of the grid
///
/// @example scss - Get the data set of grid 1
/// $grid: _get-grid('grid-1');
///
@function _get-grid(
    $grid-name: $default-grid,
    $grid-array: $grid-config
) {

    $grid-data: ();

    @if (not type-of($grid-name) == string) {

        @error '$grid-name must be a string';

    } @else {

        @if (map-has-key($grid-array, $grid-name)) {

            $grid-data: map-get($grid-array, $grid-name);

        } @else {

            @warn 'Requested grid doesnt exist. Fallback used.';

            $grid-data: $fallback-grid-config;

        }

    }

    @return $grid-data;

}



///
/// Get data from the grid config. Fallback if field doesnt exist.
///
/// @param {string} $field-name - Name of field you want the value
/// @param {array} $grid-data - grid array from grid config
///
/// @return {mixed} Value of the field
///
/// @example scss - Get the gutter from grid 1
/// margin: _get-grid-data('gutter', _get-grid('grid-1'));
///
@function _get-grid-data(
    $field-name,
    $grid-data
) {

    $field-data: '';

    @if (map-has-key($grid-data, $field-name)) {

        $field-data: map-get($grid-data, $field-name);

    } @else {

        @if (map-has-key(map-get($grid-config, $default-grid), $field-name)) {

            $field-data: map-get(map-get($grid-config, $default-grid), $field-name);

        } @else {

            @if (map-has-key($fallback-grid-config, $field-name)) {

                @warn 'Requested grid data doesnt exist. Fallback used.';

                $field-data: map-get($fallback-grid-config, $field-name);

            } @else {

                @error 'Requested grid data doesnt exist.';

            }

        }

    }

    @return $field-data;

}



///
/// Get the column width as percentage
///
/// @param {number} $units - Span of columns
/// @param {number} $columns - Total number of columns
/// @param {number} $gutter - Size of the gutter with unit (px, em or %)
///
/// @return {number} Column width as percentage
///
/// @example scss - Set the width to 4 from 12 columns with a 20% gutter
/// width: _get-grid-column-width(4, 12, 20%);
///
@function _get-grid-column-width(
    $units,
    $columns,
    $gutter
) {

    $gutter : if(unit($gutter) == '%', $gutter, 0);

    $total-gutter: ($columns) * $gutter;

    $single-column-width: (100% - $total-gutter) / $columns;

    @return ($single-column-width * $units) + ($gutter * ($units - 1));
}



///
/// Get the column offset as percentage
///
/// @param {number} $units - Span of columns
/// @param {number} $columns - Total number of columns
/// @param {string} $direction - Set the direction of the offset. Possible values: `left` or `right`
/// @param {number} $gutter - Size of the gutter with unit (px, em or %)
///
/// @return {number} Positive or negative percentage
///
/// @example scss - Move the element 4 columns to the right
/// left: _get-grid-column-offset(4, 12, 'right', 20%);
///
@function _get-grid-column-offset(
    $units,
    $columns,
    $direction,
    $gutter
) {

    $gutter : if(unit($gutter) == '%', $gutter, 0);

    $dir: if($direction == 'left', -1, if($direction == 'right', 1, 0));

    $offset : _get-grid-column-width($units, $columns, $gutter) + $gutter;

    @return $dir * $offset;
}



///
/// Generate column styles with given expanded arguments
///
/// @param {number} $units - Span of column
/// @param {number} $columns - Total number of columns
/// @param {number} $gutter - Size of the gutter with unit (px, em or %)
/// @param {bool} $column-first - Indicator if row starts with a column
///
/// @example scss - Set the element as column with the span of 4 columns
/// include _grid-column(4);
///
@mixin _grid-column(
    $units,
    $columns,
    $gutter,
    $column-first
) {

    box-sizing: border-box;
    float: left;
    position: relative;
    min-height: 1px;

    @if (unit($gutter) == '%') {

        margin-left: $gutter;

    } @else {

        $gutter: $gutter / 2;

        padding: {
            left: $gutter;
            right: $gutter;
        }

        $gutter: 0;
    }

    width: _get-grid-column-width($units, $columns, $gutter);
}



///
/// Generate column styles with given width
///
/// @param {number} $units - Span of column
/// @param {string} $grid-name [$default-grid] - [`optional`] Name of the grid, default is the $default-grid
///
/// @example scss - Set the element as column with the span of 4 columns
/// include grid-column(4);
///
@mixin grid-column(
    $units,
    $grid-name: $default-grid
) {

    $grid-data: _get-grid($grid-name);

    $columns: _get-grid-data('columns', $grid-data);

    $gutter: _get-grid-data('gutter', $grid-data);

    $column-first: _get-grid-data('column-first', $grid-data);

    @include _grid-column($units, $columns, $gutter, $column-first);

}


///
/// Generate column context styles with given expanded arguments
///
/// @param {string} $gutter - Name of the grid, default is the $default-grid
/// @param {string} $column-first - Indicator if row starts with a column
///
/// @example scss - Set all context styles
/// include _grid-context(3%, false);
///
@mixin _grid-context(
    $gutter,
    $column-first
) {

    @include clearfix();

    box-sizing: border-box;
    display: block;

    $gutter-prop: if(unit($gutter) == '%', margin, padding);
    $gutter: if($gutter-prop == 'padding', $gutter / 2, $gutter);

    @if ($column-first) {

        $gutter: $gutter * -1;

        @if ($gutter-prop == margin) {

            $expansion-rate : 1 + $gutter / 100%;
            $gutter : $gutter * $expansion-rate;

        } @else {
            margin-right: $gutter;
        }

        margin-left: $gutter;

    } @else {

        padding-right: $gutter;

        @if ($gutter-prop == padding) {
            padding-left: $gutter;
        }
    }
}



///
/// Generate column context styles
///
/// @param {string} $grid-name [$default-grid] - [`optional`] Name of the grid, default is the $default-grid
///
/// @example scss - Set all context styles
/// include grid-context();
///
@mixin grid-context(
    $grid-name: $default-grid
) {

    $grid-data: _get-grid($grid-name);

    $gutter: _get-grid-data('gutter', $grid-data);

    $column-first: _get-grid-data('column-first', $grid-data);

    @include _grid-context($gutter, $column-first);

}



///
/// Generate a new row in a grid
///
/// @example scss - Break a row
/// include grid-new-row();
///
@mixin grid-new-row() {
    clear: both;
}



///
/// Set a offset to a column
///
/// @param {number} $units - Span of column
/// @param {number} $columns - Total number of columns
/// @param {number} $gutter - Size of the gutter with unit (px, em or %)
/// @param {string} $direction - Direction of the offset
/// @param {bool} $affect-followers - Indicator if other rows are affected
///
/// @example scss - Push the column 4 cols to the right in a 12 col grid with 2% gutter and no affection to other rows
/// include _grid-column-offset(4, 12, 2%, right, false);
///
@mixin _grid-column-offset(
    $units,
    $columns,
    $gutter,
    $direction,
    $affect-followers
) {

    $prefix: if($affect-followers, margin-, '');

    $correction: if($affect-followers and unit($gutter) == '%', $gutter, 0);

    #{$prefix}left: _get-grid-column-offset($units, $columns, $direction, $gutter) + $correction;

}



///
/// Push a column to the right
///
/// @param {number} $units - Span of columns
/// @param {string} $grid-name [$default-grid] - [`optional`] Name of the grid, default is the $default-grid
/// @param {bool} $affect-followers [$default-grid-push-pull-affects-followers] - [`optional`] Indicator if other rows are affected
///
/// @example scss - Push the column 4 cols
/// include grid-column-push(4);
///
@mixin grid-column-push(
    $units,
    $grid-name: $default-grid,
    $affect-followers: $default-grid-push-pull-affects-followers
) {

    $grid-data: _get-grid($grid-name);

    $columns: _get-grid-data('columns', $grid-data);

    $gutter: _get-grid-data('gutter', $grid-data);

    @include _grid-column-offset($units, $columns, $gutter, right, $affect-followers);

}



///
/// Pull a column to the left
///
/// @param {number} $units - Span of columns
/// @param {string} $grid-name [$default-grid] - [`optional`] Name of the grid, default is the $default-grid
/// @param {bool} $affect-followers [$default-grid-push-pull-affects-followers] - [`optional`] Indicator if other rows are affected
///
/// @example scss - Pull the column 4 cols
/// include grid-column-pull(4);
///
@mixin grid-column-pull(
    $units,
    $grid-name: $default-grid,
    $affect-followers: $default-grid-push-pull-affects-followers
) {

    $grid-data: _get-grid($grid-name);

    $columns: _get-grid-data('columns', $grid-data);

    $gutter: _get-grid-data('gutter', $grid-data);

    @include _grid-column-offset($units, $columns, $gutter, left, $affect-followers);

}
