////
///
/// Color Libary
///
/// @group Colors
/// @since 2.0.0
///
////



///
/// Associate base color array.
/// Includes a key/value pair of the color to increase the consistency.
///
/// @prop {String} name -  Name of the color
/// @prop {Number} hex -  Hexcode of the color
///
/// @type array
/// @example scss - Set two colors
///  $color-config (
///     'color-1' : #000000,
///     'color-2' : #FFFFFF
///  );
///
$color-base: () !default;



///
/// Associate color derivate array.
/// Includes a key/value pair of the color to increase the consistency.
///
/// @prop {String} name -  Name of the color
/// @prop {Number} hex -  Hexcode of the color
///
/// @type array
/// @example scss - Set two colors
///  $color-config (
///     'color-1' : #000000,
///     'color-2' : #FFFFFF
///  );
///
$color-derivates: () !default;



///
/// Default color-map declaration. Only used for default params in functions.
/// @type array
///
$default-color-map: map-merge($color-base, $color-derivates) !default;



///
/// XXXXXXX
/// @type array
///
$color-palettes: ()!default;



///
/// XXXXXXX
/// @type array
///
$default-color-palettes-map: $color-palettes !default;



///
/// Get the entry from color array as hexcode
///
/// @param {string} $color-name - Name of the color
/// @param {array} $color-map [$default-color-map] - [`optional`] color array
///
/// @return {string} Hexcode
///
/// @example scss - Set the textcolor to 'color-1'
/// color: color('color-1');
///
@function color(
    $color-name,
    $color-contrast: false,
    $color-map: $default-color-map
) {

    @if (not map-has-key($color-map, $color-name)) {
        @error 'Given color map has no color named "#{$color-name}".';
    }

    @return map-get($color-map, $color-name);

}



///
///
@mixin _generate-color-palette-attributes(
    $attributes,
    $cherrypick
) {


    @each $attribute, $value in $attributes {

        @if ($attribute == $cherrypick and not ($cherrypick == false)) or ($cherrypick == false) {

            @if type-of($value) == color {

                #{$attribute}: $value;

            } @else if type-of($value) == string {

                #{$attribute}: color($value);

            } @else {

                @each $pseudo, $color in $value {

                    @if $pseudo == 'default' {

                        @if type-of($color) == string {
                            #{$attribute}: color($color);
                        } @else {
                            #{$attribute}: $color;
                        }

                    } @else {

                        &#{$pseudo} {
                            @if type-of($color) == string {
                                #{$attribute}: color($color);
                            } @else {
                                #{$attribute}: $color;
                            }
                        }
                    }
                }
            }
        }
    }

}



///
///
@mixin color-palette(
    $palette,
    $contrast: false,
    $cherrypick: false,
    $color-palettes-map: $default-color-palettes-map
) {

    @each $scheme, $attributes in map-get($color-palettes-map, $palette) {

        @if not ($contrast == false) or ($scheme == 'default') {

            @if not ($contrast == false) and not ($scheme == 'default') {

                @at-root .is-#{$scheme}-contrast #{if(&,&, '')} {

                    @include _generate-color-palette-attributes($attributes, $cherrypick);

                }

            } @else {

                @include _generate-color-palette-attributes($attributes, $cherrypick);

            }
        }
    }

}


///
/// Generate from the color array a bundle of foreground color classes
///
/// @param {array} $color-map [$color-config] - [`optional`] Color array
/// @param {string} $class-prefix [foreground] - [`optional`] Class prefix
/// @param {string} $class-separator [$default-class-separator] - [`optional`] Class sperator
///
@mixin generate-color-foreground-classes(
    $color-map: $color-base,
    $class-prefix: 'foreground-color',
    $class-separator: $default-class-separator
) {

    @include _generate-classes($color-map, color, $class-prefix, $class-separator);

}



///
/// Generate from the color array a bundle of background color classes
///
/// @param {array} $color-map [$color-config] - [`optional`] Color array
/// @param {string} $class-prefix [background] - [`optional`] Class prefix
/// @param {string} $class-separator [$default-class-separator] - [`optional`] Class seperator
///
@mixin generate-color-background-classes(
    $color-map: $color-base,
    $class-prefix: 'background-color',
    $class-separator: $default-class-separator
) {

    @include _generate-classes($color-map, background-color, $class-prefix, $class-separator);

}
