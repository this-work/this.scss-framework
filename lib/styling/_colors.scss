////
///
/// Color Libary
///
/// @group Colors
/// @since 2.0.0
///
////



///
/// Associate base color array.
/// Includes a key/value pair of the color to increase the consistency.
///
/// @prop {String} name -  Name of the color
/// @prop {Number} hex -  Hexcode of the color
///
/// @type array
/// @example scss - Set two colors
///  $color-config (
///     'color-1' : #000000,
///     'color-2' : #FFFFFF
///  );
///
$color-base: () !default;



///
/// Associate color derivate array.
/// Includes a key/value pair of the color to increase the consistency.
///
/// @prop {String} name -  Name of the color
/// @prop {Number} hex -  Hexcode of the color
///
/// @type array
/// @example scss - Set two colors
///  $color-config (
///     'color-1' : #000000,
///     'color-2' : #FFFFFF
///  );
///
$color-derivates: () !default;



///
/// Default color-map declaration. Only used for default params in functions.
/// @type array
///
$default-color-map: map-merge($color-base, $color-derivates) !default;



///
/// Associate color palettes array.
/// Includes a object with the palette names, contrast type and attributes with colors.
/// @type array
///
/// @example scss - Set a copytext color palette
///  $color-palettes: (
///     'copytext': (
///         default: (
///             color: 'black'
///         ),
///         negative: (
///             color: 'white'
///         )
///     ),
///  );
///
$color-palettes: ()!default;



///
/// Default color-palettes declaration. Only used for default params in functions.
/// @type array
///
$default-color-palettes-map: $color-palettes !default;



///
/// Get the entry from color array as hexcode
///
/// @param {string} $color-name - Name of the color
/// @param {array} $color-map [$default-color-map] - [`optional`] color array
///
/// @return {string} Hexcode
///
/// @example scss - Set the textcolor to 'color-1'
/// color: color('color-1');
///
@function color(
    $color-name,
    $color-contrast: false,
    $color-map: $default-color-map
) {

    @if (not map-has-key($color-map, $color-name)) {
        @error 'Given color map has no color named "#{$color-name}".';
    }

    @return map-get($color-map, $color-name);

}



///
/// Generate the color theme attributes
///
/// @param {array} $attributes - Attributes with colors
/// @param {string} $cherrypick - Only the given attribute will be rendered.
///
@mixin _generate-color-theme-attributes(
    $attributes,
    $cherrypick
) {


    @each $attribute, $value in $attributes {

        @if ($attribute == $cherrypick and not ($cherrypick == false)) or ($cherrypick == false) {

            @if type-of($value) == color {

                #{$attribute}: $value;

            } @else if type-of($value) == string {
                @if str-index($value, "gradient") {
                    #{$attribute}: $value;
                } @else {
                    #{$attribute}: color($value);
                }
            } @else {

                @each $pseudo, $color in $value {

                    @if $pseudo == 'default' {

                        @if type-of($color) == string {
                            @if str-index($color, "gradient") {
                                #{$attribute}: $color;
                            } @else {
                                #{$attribute}: color($color);
                            }
                        } @else {
                            #{$attribute}: $color;
                        }

                    } @else {

                        &#{$pseudo} {
                            @if type-of($color) == string {
                                @if str-index($color, "gradient") {
                                    #{$attribute}: $color;
                                } @else {
                                    #{$attribute}: color($color);
                                }
                            } @else {
                                #{$attribute}: $color;
                            }
                        }
                    }
                }
            }
        }
    }

}



///
/// Generate from the color-palettes array a bundle of color classes
///
/// @param {string} $palette - Color palette name
/// @param {bool} $contrast [true] - [`optional`] Render the contrast color classes.
/// @param {string} $cherrypick [false] - [`optional`] Only the given attribute will be rendered.
/// @param {string} $fallback-default-scheme-name [positive] - [`optional`] Fallback contrast class key when no parent selector are given
/// @param {array} $color-palettes-map[$default-color-palettes-map] - [`optional`] color palette array
///
@mixin color-theme(
    $palette,
    $cherrypick: false,
    $fallback-default-scheme-name: 'light',
    $color-palettes-map: $default-color-palettes-map
) {

    @if (not map-has-key($color-palettes-map, $palette)) {
        @error 'Given color pallette was not found in the $color-palettes array.';
    }

    @each $scheme, $attributes in map-get($color-palettes-map, $palette) {

        @at-root .theme-#{$scheme} #{if(&,&, '')}, .theme-#{$scheme}#{if(&,&, '')},
        *[class*="theme"] .theme-#{$scheme} #{if(&,&, '')}, *[class*="theme"] .theme-#{$scheme}#{if(&,&, '')} {

            @include _generate-color-theme-attributes($attributes, $cherrypick);

        }

    }

}


///
/// Generate from the color array a bundle of foreground color classes
///
/// @param {array} $color-map [$color-config] - [`optional`] Color array
/// @param {string} $class-prefix [foreground] - [`optional`] Class prefix
/// @param {string} $class-separator [$default-class-separator] - [`optional`] Class sperator
///
@mixin generate-color-foreground-classes(
    $color-map: $color-base,
    $class-prefix: 'foreground-color',
    $class-separator: $default-class-separator
) {

    @include _generate-classes($color-map, color, $class-prefix, $class-separator);

}



///
/// Generate from the color array a bundle of background color classes
///
/// @param {array} $color-map [$color-config] - [`optional`] Color array
/// @param {string} $class-prefix [background] - [`optional`] Class prefix
/// @param {string} $class-separator [$default-class-separator] - [`optional`] Class seperator
///
@mixin generate-color-background-classes(
    $color-map: $color-base,
    $class-prefix: 'background-color',
    $class-separator: $default-class-separator
) {

    @include _generate-classes($color-map, background-color, $class-prefix, $class-separator);

}
