////
///
/// Spacing Libary
///
/// @group Spacings
/// @since 2.0.0
///
////



///
/// Associate spacing array.
/// Includes a key/value pair of the spacing to increase the consistency.
///
/// @prop {String} name -  Name of the spacing
/// @prop {Number} value -  Value of the spacing
///
/// @type array
/// @example scss - Set two spacings
///  $spacing-config (
///     '2' : 2px,
///     '6' : 6px
///  );
///
$spacing-config: () !default;



///
/// Responsive spacing configuration.
/// Configuration of all standardized responsive spacings you can use.
/// Can configure with spacing config keys.
///
/// @type array
/// @example scss - Set three responsive spacings
//  $responsive-spacing-config: (
//          'medium': (
//                'default': '71',
//                's': '115',
//                'l': '186'
//          ),
//          'large': (
//                'default': '71',
//                's': '115',
//                'm': '186',
//                'l': '301'
//          ),
//          'special': (
//                'default': '0',
//                'l': '301'
//          ),
//);
///
$responsive-spacing-config: () !default;



///
/// Default spacing-map declaration. Only used for default params in functions.
/// @type array
///
$default-spacing-map: $spacing-config !default;



///
/// Get the correct spacing for the type of param. Can be a key
///
/// @param {number|string} $spacing - Param to check. Can be a Key of a Spacing Array as string or a number.
///
/// @return {string} - Ordered Value from the spacings array or only unitized.
///
@function _get-possible-spacing-value(
    $spacing
) {

    @if (str-is-quoted($spacing)) {

        @return spacing($spacing);

    } @else {

        @return unitize($spacing);

    }
}



///
/// Get the entry from spacing array with unit
///
/// @param {string} $spacing-name - Name of the spacing pair
/// @param {string} $spacing-unit-type [$default-unit-type] - [`optional`] Type of unit ('relative' or 'absolute')
/// @param {array} $spacing-map [$default-spacing-map] - [`optional`] Spacing array
///
/// @return {string} spacing with unit
///
/// @example scss - Set the padding to spacing '2'
/// padding: spacing('2');
/// @example scss - Set the padding to spacing '2' with rem units
/// padding: spacing('2', 'relative');
///
@function spacing(
    $spacing-name,
    $spacing-unit-type: $default-unit-type,
    $spacing-map: $default-spacing-map
) {

    @if (not map-has-key($spacing-map, $spacing-name)) {
        @error 'Given spacing map has no spacing named "#{$spacing-name}".';
    }

    $spacing: map-get($spacing-map, $spacing-name);

    $spacing: unitize($spacing, $spacing-unit-type);

    @return $spacing;

}



///
/// Generate from the responsive spacing array a bundle of spacing classes
///
/// @param {string} $spacing-type [margin] - [`optional`] CSS Type
/// @param {string} $direction [top] - [`optional`] Direction of the spacing
/// @param {array} $spacing-map [$responsive-spacing-config] - [`optional`] Responsive spacing array
///
@mixin generate-responsive-spacing-classes(
    $spacing-type: 'margin',
    $direction: 'top',
    $spacing-map: $responsive-spacing-config
) {

    @each $spacing-name, $spacings in $spacing-map {

        @each $breakpoint, $spacing in $spacings {

            @include possible-mediaquery($breakpoint) {

                .spacing-#{$spacing-type}-#{$direction}-#{$spacing-name} {
                    #{$spacing-type}-#{$direction}: _get-possible-spacing-value($spacing);
                }

            }

        }

    }

}



///
/// Generate from the spacing array a bundle of padding spacing classes
///
/// @param {array} $spacing-map [$spacing-config] - [`optional`] Spacing array
/// @param {string} $class-prefix [padding] - [`optional`] Class prefix
/// @param {string} $class-separator [$default-class-separator] - [`optional`] Class seperator
///
@mixin generate-spacing-padding-classes(
    $spacing-map: $spacing-config,
    $class-prefix: 'padding',
    $class-separator: $default-class-separator
) {

    @include _generate-classes($spacing-map, padding, $class-prefix, $class-separator);

}



///
/// Generate from the spacing array a bundle of margin spacing classes
///
/// @param {array} $spacing-map [$spacing-config] - [`optional`] Spacing array
/// @param {string} $class-prefix [margin] - [`optional`] Class prefix
/// @param {string} $class-separator [$default-class-separator] - [`optional`] Class seperator
///
@mixin generate-spacing-margin-classes(
    $spacing-map: $spacing-config,
    $class-prefix: 'margin',
    $class-separator: $default-class-separator
) {

    @include _generate-classes($spacing-map, margin, $class-prefix, $class-separator);

}
