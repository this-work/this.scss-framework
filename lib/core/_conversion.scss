////
///
/// Tool Libary
///
/// @group Core
/// @since 2.0.0
///
////



///
/// Default unit type. Defined the unit output for all mixins and functions.
///
/// `absolute` - All Outputs are in an absolute unit type (px) or rather the orginal value.
///
/// `relative` - All Outputs are in an relative unit type (rem) when the orginal value are PX values.
///
/// @type string
///
$default-unit-type: 'absolute' !default;



///
/// Default conversion context. Used for from and to rem calculation.
/// @type number
///
$default-conversion-context: 16px !default;



///
/// Strips the unit from a given number
///
/// @param {number} $number [] - [`required`] Number to remove unit from
///
/// @return {number} - Unitless number
///
@function strip-unit($number) {

    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}



///
/// Converts `px` to `em`
///
/// @param {number} $px [] - [`required`] px value to convert
/// @param {number} $context [$default-conversion-context] - [`optional`] conversion context
///
/// @returns {number} - the `px` value converted to `em`
///
@function em($px, $context: $default-conversion-context) {
    @return (strip-unit($px) / strip-unit($context)) * 1em;
}



///
/// Converts `px` to `rem`
///
/// @param {number} $px [] - [`required`] px value to convert
/// @param {number} $context [$default-conversion-context] - [`optional`] conversion context
///
/// @returns {number} - the `px` value converted to `rem`
///
@function rem($px, $context: $default-conversion-context) {
    @return (strip-unit($px) / strip-unit($context)) * 1rem;
}



///
/// Converts `rem` | `em` to `px`
///
/// @param {number} $r-em [] - [`required`] rem | em value to convert
/// @param {number} $context [$default-conversion-context] - [`optional`] conversion context
///
/// @returns {number} - the `rem` | `em` value converted to `px`
///
@function px($r-em, $context: $default-conversion-context) {
    @return (strip-unit($r-em) * strip-unit($context)) * 1px;
}



///
/// Converts Unit to given unit type
///
/// @param {number} $value - Value to convert
/// @param {string} $unit-type [$default-unit-type] - [`optional`] Type of font unit ('relative' or 'absolute')
///
/// @returns {number} - the converted value
///
@function unitize($value, $unit-type: $default-unit-type) {

    @if ($unit-type == "relative" and unit($value) == "px" ) {

        $value: rem($value);

    }

    @if ($unit-type == "absolute" and unit($value) == "rem" ) {

        $value: px($value);

    }

    @if ($unit-type == "absolute" and unit($value) == "em" ) {

        $value: px($value);

    }

    @return $value;

}
