//// ----------------------------------------------------------------------------------------------
///   THIS: scss-core
///
///   - View System -
///
/// @group Core
/// @since 0.0.1
//// ----------------------------------------------------------------------------------------------


/// Default ratio for hidpi media queries
$default-hidpi-ratio: 1.5 !default;


///
/// Holds the media query configuration.
/// Configure this in your project settings.
///
/// @example
///     $mq-config: (
///         'screen' : (
///             'xlarge' : 1600px,
///             'small' : 320px,
///             'large' : 1024px,
///             'medium' : 540px,
///         ),
///         'static' : (
///             'ie8' : (
///                 'selector' : '.ie-8',
///                 'view' : 'large'
///             ),
///             'ie9' : (
///                 'selector' : '.internet-explorer-9',
///                 'view' : 'medium'
///             )
///         )
///     );
///
$mq-config : () !default;


///
///
///
@function _get-mq-value($key, $bp) {

    $config: map-get($mq-config, $key);

    @if (map-has-key($config, $bp)) {
        @return map-get($config, $bp);
    }

    @error 'Breakpoint #{$bp} not defined';
}


///
///
///
@function _get-breakpoint-value($bp) {
    @return _get-mq-value('screen', $bp);
}


///
///
///
@function _get-static-selector($id) {
    @return map-get(_get-mq-value('static', $id), 'selector');
}



// --- "Static" Functions & Mixins ------------------------

///
/// ONLY FOR STATIC VIEWS!
///
@mixin respond-to($static-ids...) {

    $selector: ();

    @each $id in $static-ids {
        $selector: append($selector, _get-static-selector($id));
    }

    @if (length($selector) > 0) {

        #{$selector} {
            @content;
        }
    }
}


///
///
///
@function _get-fallback-selector($bp) {

    $statics: map-get($mq-config, 'static');
    $selector: ();

    @each $key, $config in $statics {

        @if (map-has-key($config, 'view') and map-get($config, 'view') == $bp) {
            $selector: append($selector, map-get($config, 'selector'));
        }
    }

    @return if(length($selector) > 0, $selector, null);
}


///
///
///
@mixin _generate-mq-fallback($bp) {
    $fallback-selector: _get-fallback-selector($bp);

    @if ($fallback-selector != null) {

        @at-root #{$fallback-selector} & {
            @content;
        }
    }
}



// --- "Responsive" Functions & Mixins --------------------

///
/// @see http://thesassway.com/advanced/implementing-bubble-sort-with-sass
///
@function _sort_bp_map() {

    $config: map-get($mq-config, 'screen');

    $keys: map-keys($config);
    $values: map-values($config);

    // Cycle through each item in the list
    @for $i from 1 through length($values) {

        // Compare the item with the previous items in the list
        @for $j from $i * -1 through -1 {

            // abs() trick to loop backward
            $j: abs($j);

            // Compare both values
            @if ($j > 1 and nth($values, $j) < nth($values, $j - 1)) {
                // If the item should go before the other, swap them
                $keys: swap($keys, $j, $j - 1);
                $values: swap($values, $j, $j - 1);
            }
        }
    }

    // empty config map
    $config: ();

    @for $k from 1 through length($values) {
        $config: map-merge($config, (nth($keys, $k): nth($values, $k)));
    }

    // Return the sorted map
    $mq-config: map-merge($mq-config, ('screen': $config)) !global;

    @return $mq-config;
}


///
/// Generate fallbacks for all breakpoints inbetween $min and $max (incl. $min).
///
@mixin _generate-inbetween-fallbacks($min, $max) {

    $ids: map-keys(map-get($mq-config, 'screen'));

    $i: 1;
    $min-found: false;
    $max-found: false;

    @while ($i <= length($ids) and not $max-found) {

        $bp-id: nth($ids, $i);

        $min-found: if($min-found, $min-found, $bp-id == $min);
        $max-found: if($max-found, $max-found, $bp-id == $max);

        @if ($min-found and not $max-found) {
            @include _generate-mq-fallback($bp-id) { @content; }
        }

        $i: $i + 1;
    }
}


///
/// Generates a width media query (min, max or in-between)
///
@mixin _generate-width-mq($generate-fallbacks, $min-max-feature, $breakpoints...) {

    $breakpoints: flatten($breakpoints);
    $mq : ();

    @if ($min-max-feature == 'between') {

        $config: _sort_bp_map();

        // min- AND max-width media query

        @if ((length($breakpoints) % 2) == 0) {

            $i: 1;

            @while $i <= length($breakpoints) {

                $min: nth($breakpoints, $i);
                $max: nth($breakpoints, $i + 1);

                @if ($generate-fallbacks) {
                    // Create fallback for outdated browser (ie-8)
                    @include _generate-inbetween-fallbacks($min, $max) { @content; }
                }

                // Get breakpoint value if id is given and generate mq string
                $min: if(type-of($min) == string, _get-breakpoint-value($min), $min);
                $max: if(type-of($max) == string, _get-breakpoint-value($max), $max);
                $mq : append($mq, 'only screen and (min-width: #{$min}) and (max-width: #{$max})', comma);

                $i : $i + 2;
            }

        } @else {
            @error 'Syntax error - odd parameter count';
        }

    } @else {

        // min- OR max-width media query

        @each $bp-val in $breakpoints {

            @if ($generate-fallbacks) {
                // Create fallback for outdated browser (ie-8)
                @include _generate-mq-fallback($bp-val) { @content }
            }

            // Get breakpoint value if id is given
            $bp-val: if(type-of($bp-val) == string, _get-breakpoint-value($bp-val), $bp-val);
            $mq : append($mq, 'only screen and (#{$min-max-feature}-width: #{$bp-val})', comma);
        }
    }

    // Output media query
    @media #{$mq} { @content; }
}


///
/// Generates a max-width media query
///
/// @param {string | css-length} $max - breakpoint id or value
/// @content Rules or directives, which are wrapped in a media query
///
@mixin below($max...) {
    @include _generate-width-mq(false, 'max', $max...) { @content; }
}


///
/// Generates a min-width media query
///
/// @param {string | css-length} $min - breakpoint id or value
/// @content Rules or directives, which are wrapped in a media query
///
@mixin above($min...) {
    @include _generate-width-mq(true, 'min', $min...) { @content; }
}


///
/// Generates a in-between (min- and max-width) media query
///
/// @param {string | css-length} $breakpoint - breakpoint ids or values
/// @content Rules or directives, which are wrapped in a media query
///
@mixin between($breakpoints...) {
    @include _generate-width-mq(true, 'between', $breakpoints...) { @content; }
}


///
/// Creates a media query to target hidpi displays
///
/// @param {number} $ratio [$default-hidpi-ratio] - [`optional`] Pixel-ratio (density)
///
/// @content Rules and directives, which get wrapped by the hidpi media query
///
@mixin hidpi($ratio: $default-hidpi-ratio) {

    /* stylelint-disable indentation */
    @media (o-min-device-pixel-ratio: #{$ratio}/1),
           (-webkit-min-device-pixel-ratio: #{$ratio}),
           (min--moz-device-pixel-ratio: #{$ratio}),
           (min-resolution: #{round(96 * $ratio)}dpi) {

        @content;
    }
    /* stylelint-enable indentation */
}
