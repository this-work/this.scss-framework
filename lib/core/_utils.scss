////
///
/// Tool Libary
///
/// @group Core
/// @since 2.0.0
///
////



///
/// Helper to replace text in a string
///
/// @param {string} $string - Haystack
/// @param {string} $search - Needle
/// @param {string} $replace - Replacement
///
/// @return {string}
///
/// @example scss - Replace in a String "is" with "was"
/// $text: str-replace($text, "is", "was")
///
@function str-replace(
    $string,
    $search,
    $replace: ''
) {

    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}



///
/// Helper to check if the string has qoutes
///
/// @param {string} $string - Haystack
///
/// @return {bool}
///
/// @example scss
/// str-is-quoted($string)
///
@function str-is-quoted($string) {
    @if type-of($string) != string {
        @error("$string: #{inspect($string)} is not a string for `str-is-quoted'");
    }
    @return "#{$string#{''}}" != $string;
}



///
/// Helper to split string in array
///
/// @param {string} $string - Haystack
/// @param {string} $separator - Needle to split the string
///
/// @return {array}
///
/// @example scss - Split '$text' in an array on very comma
/// $array: str-split($text, ",")
///
@function str-split(
    $string,
    $separator
) {

    $split-arr: ();

    $index : str-index($string, $separator);

    @while $index != null {

        $item: str-slice($string, 1, $index - 1);

        $split-arr: append($split-arr, $item);

        $string: str-slice($string, $index + 1);

        $index : str-index($string, $separator);
    }

    $split-arr: append($split-arr, $string);

    @return $split-arr;
}



///
/// Helper to flatten a deep array
///
/// @param {array} $list - Array / List
///
/// @return {array}
///
/// @example scss - Flatten a deep $breakpoints array
/// $breakpoints: flatten($breakpoints);
///
@function flatten($list) {
    $result: ();

    @each $entry in $list {

        @if (length($entry) == 1) {

            $result: append($result, $entry);

        } @else {

            $flat-entry: flatten($entry);

            @each $item in $flat-entry {
                $result: append($result, $item);
            }

        }
    }

    @return $result;
}



///
/// Helper to swap two entrys in an array
///
/// @param {array} $list - Array / List
/// @param {number} $index-a - Index of Item to Swap 1
/// @param {number} $index-b - Index of Item to Swap 2
///
/// @return {array}
///
/// @example scss - Swap entrys 3 and 5 in the color array
/// $colors: swap($colors, 3, 5);
///
@function swap($list, $index-a, $index-b) {

    @if abs($index-a) > length($list) or abs($index-b) > length($list) {
        @return $list;
    }

    $tmp: nth($list, $index-a);
    $list: set-nth($list, $index-a, nth($list, $index-b));
    $list: set-nth($list, $index-b, $tmp);

    @return $list;
}


///
/// Pow Helper
/// Raise number to the nth power
///
/// @param {number} $number - The base number
/// @param {number} $exponent - The exponent to which to raise $base
///
/// @return {number}
///
@function pow($number, $exponent) {
    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    }

    @return $value;
}


///
/// Helper to calculating the square root of a number
///
/// @param {number} $r
///
/// @return {number} - Square root
///
@function sqrt($r) {
    $x0: 1;
    $x1: $x0;

    @for $i from 1 through 10 {
        $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
        $x0: $x1;
    }

    @return $x1;
}



///
/// Helper to convert a string to a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function number(
    $value
) {

    @if type-of($value) == 'number' {

        @return $value;

    }

    $result: 0;

    $digits: 0;

    $minus: str-slice($value, 1, 1) == '-';

    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);

        @if not (index(map-keys($numbers), $character) or $character == '.') {

            $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

            @return if($minus, -$result, $result) * map-get($units, str-slice($value, $i));

        }

        @if $character == '.' {

            $digits: 1;

        } @else if $digits == 0 {

            $result: $result * 10 + map-get($numbers, $character);

        } @else {

            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;

        }
    }

    @return if($minus, -$result, $result);
}



///
/// Sort an array by value.
///
/// @param {array} $array - Array to sort.
///
/// @return {array} - Sorted Array
///
@function sort-values($array) {

    $keys: map-keys($array);

    $values: map-values($array);

    @for $i from 1 through length($values) {

        // Compare the item with the previous items in the list
        @for $j from $i * -1 through -1 {

            // abs() trick to loop backward
            $j: abs($j);

            @if ($j > 1 and number(nth($values, $j)) < number(nth($values, $j - 1))) {

                // If the item should go before the other, swap them
                $keys: swap($keys, $j, $j - 1);
                $values: swap($values, $j, $j - 1);

            }
        }
    }

    $sortedArray: ();

    @for $k from 1 through length($values) {
        $sortedArray: map-merge($sortedArray, (nth($keys, $k): nth($values, $k)));
    }

    @return $sortedArray;
}



///
/// Default class-separator.
/// @type string
///
$default-class-separator: '--' !default;



///
/// Generate from array a bundle of classes
///
/// @param {array} $map - Array to loop
/// @param {string} $property - CSS property to set
/// @param {string} $class-prefix - Class prefix
/// @param {string} $class-separator - [`optional`] Class sperator
///
@mixin _generate-classes(
    $map,
    $property,
    $class-prefix,
    $class-separator: '-'
) {

    @each $key, $value in $map {
        .#{$class-prefix}#{$class-separator}#{$key} {
            #{$property}: $value;
        }
    }
}
