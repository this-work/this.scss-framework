////
///
/// Tool Libary
///
/// @group Core
/// @since 2.0.0
///
////



///
/// Helper to replace text in a string
///
/// @param {string} $string - Haystack
/// @param {string} $search - Needle
/// @param {string} $replace - Replacement
///
/// @return {string}
///
/// @example scss - Replace in a String "is" with "was"
/// $text: str-replace($text, "is", "was")
///
@function str-replace(
    $string,
    $search,
    $replace: ''
) {

    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}



///
/// Helper to check if the string has qoutes
///
/// @param {string} $string - Haystack
///
/// @return {bool}
///
/// @example scss
/// str-is-quoted($string)
///
@function str-is-quoted($string) {
    @if type-of($string) != string {
        @error("$string: #{inspect($string)} is not a string for `str-is-quoted'");
    }
    @return "#{$string#{''}}" != $string;
}



///
/// Helper to split string in array
///
/// @param {string} $string - Haystack
/// @param {string} $separator - Needle to split the string
///
/// @return {array}
///
/// @example scss - Split '$text' in an array on very comma
/// $array: str-split($text, ",")
///
@function str-split(
    $string,
    $separator
) {

    $split-arr: ();

    $index : str-index($string, $separator);

    @while $index != null {

        $item: str-slice($string, 1, $index - 1);

        $split-arr: append($split-arr, $item);

        $string: str-slice($string, $index + 1);

        $index : str-index($string, $separator);
    }

    $split-arr: append($split-arr, $string);

    @return $split-arr;
}



///
/// Helper to flatten a deep array
///
/// @param {array} $list - Array / List
///
/// @return {array}
///
/// @example scss - Flatten a deep $breakpoints array
/// $breakpoints: flatten($breakpoints);
///
@function flatten($list) {
    $result: ();

    @each $entry in $list {

        @if (length($entry) == 1) {

            $result: append($result, $entry);

        } @else {

            $flat-entry: flatten($entry);

            @each $item in $flat-entry {
                $result: append($result, $item);
            }

        }
    }

    @return $result;
}



///
/// Helper to swap two entrys in an array
///
/// @param {array} $list - Array / List
/// @param {number} $index-a - Index of Item to Swap 1
/// @param {number} $index-b - Index of Item to Swap 2
///
/// @return {array}
///
/// @example scss - Swap entrys 3 and 5 in the color array
/// $colors: swap($colors, 3, 5);
///
@function swap($list, $index-a, $index-b) {

    @if abs($index-a) > length($list) or abs($index-b) > length($list) {
        @return $list;
    }

    $tmp: nth($list, $index-a);
    $list: set-nth($list, $index-a, nth($list, $index-b));
    $list: set-nth($list, $index-b, $tmp);

    @return $list;
}



///
/// Default class-separator.
/// @type string
///
$default-class-separator: '--' !default;



///
/// Generate from array a bundle of classes
///
/// @param {array} $map - Array to loop
/// @param {string} $property - CSS property to set
/// @param {string} $class-prefix - Class prefix
/// @param {string} $class-separator - [`optional`] Class sperator
///
@mixin _generate-classes(
    $map,
    $property,
    $class-prefix,
    $class-separator: '-'
) {

    @each $key, $value in $map {
        .#{$class-prefix}#{$class-separator}#{$key} {
            #{$property}: $value;
        }
    }
}



///
/// Generate a cleafix
///
@mixin clearfix() {

    &:before,
    &:after {
        content : "";
        display : table;
        line-height : 0;
    }

    &:after {
        clear : both;
    }
}
