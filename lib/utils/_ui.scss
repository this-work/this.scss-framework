////
///
/// UI Libary
///
/// @group Utils
/// @since 1.0.0
///
////



///
/// Mixin to style the `placeholder` text of an `input` element.
///
/// @param {string} $context ['&'] - [`optional`] Context for the placeholder rules
///
/// @example scss - Set placeholder color to purple
/// include placeholder() {
///     color: purple;
/// };
///
@mixin placeholder($context : '&') {

    @each $prefix in "::-webkit-input", ":moz", "::-moz", ":-ms-input" {

        #{$context}#{$prefix}-placeholder {
            @content;
        }

    }

}



///
/// Mixin to style the text `selection` of a user interaction
///
/// @param {string} $color-foreground-name - Name of the color from the color array for the text
/// @param {string} $color-background-name - Name of the color from the color array for the background
///
/// @example scss - Set selection to black with white text color
/// include generate-selection-style('white', 'black');
///
@mixin generate-selection-style($color-foreground-name, $color-background-name) {

    ::selection, ::-moz-selection {

        @if (function-exists(color)) {

            background: color($color-background-name);
            color: color($color-foreground-name);

        } @else {

            background: $color-background-name;
            color: $color-foreground-name;

        }

        opacity: 1;
    }

}



///
/// Deactivate all user interactions.
///
/// @example scss
/// include deactivate-user-selection();
///
@mixin deactivate-user-selection() {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
}