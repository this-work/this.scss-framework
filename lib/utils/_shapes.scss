////
///
/// Shape Libary
///
/// @group Utils
/// @since 1.0.0
///
////



///
/// Mixin to create CSS triangles.
///
/// @param {number} $width - The width of the triangle
/// @param {number} $height - The height of the triangle
/// @param {string | number} $angle - Direction of the triangle.
///
/// Possible values are
///
/// - top
/// - top right
/// - right
/// - bottom right
/// - bottom
/// - bottom left
/// - left
/// - top left
///
/// or any number between 0 and 360
///
/// @param {color} $color [#000000] - `[optional]` Color of the triangle.
///
@mixin triangle(
    $width,
    $height,
    $angle,
    $color : #000000
) {

    @if nth($angle, 1) == "top" or nth($angle, 1) == "bottom" { $angle : "#{$angle}"; }

    @if $angle == "top"          { $angle : 0; }
    @if $angle == "top right"    { $angle : 45 * 7; }
    @if $angle == "right"        { $angle : 45 * 2; }
    @if $angle == "bottom right" { $angle : 45 * 1; }
    @if $angle == "bottom"       { $angle : 45 * 4; }
    @if $angle == "bottom left"  { $angle : 45 * 3; }
    @if $angle == "left"         { $angle : 45 * 6; }
    @if $angle == "top left"     { $angle : 45 * 5; }

    $deg : $angle + 45;

    $deg : strip-unit($deg);

    @while $deg > 90 {
        $deg : $deg - 90;
    }

    @while $deg < 0 {
        $deg : $deg + 90;
    }

    $deg: calc($deg / 90);

    display: block;
    width: 0;
    height: 0;
    border-style: solid;
    border-color: transparent;

    @if $angle <= 45 or $angle > 315 {

        border-bottom-color: $color;
        border-width: 0 unitize($width * abs($deg - 1)) unitize($height) unitize($width * $deg);
    }

    @if $angle > 45 and $angle <= 135 {

        border-left-color: $color;
        border-width: unitize($height * $deg) 0 unitize($height * abs($deg - 1)) unitize($width);
    }

    @if $angle > 135 and $angle <= 225 {

        border-top-color: $color;
        border-width: unitize($height) unitize($width * $deg) 0 unitize($width * abs($deg - 1));
    }

    @if $angle > 225 and $angle <= 315 {

        border-right-color: $color;
        border-width: unitize($height * abs($deg - 1)) unitize($width) unitize($height * $deg) 0;
    }
}



///
/// Mixin to create CSS triangles with shadow.
///
/// @param {number} $height - The height of the triangle
/// @param {number} $color - Color of the triangle
/// @param {number} $shadow-offset - Offset the triangle shadow
/// @param {number} $shadow-blur - Blur the triangle shadow
/// @param {number} $shadow-spread - Spread the triangle shadow
/// @param {number} $shadow-color - Color the triangle shadow
/// @param {number} $position [relative] - CSS position for the triangle
///
@mixin triangle-with-shadow(
    $height,
    $color,
    $shadow-offset,
    $shadow-blur,
    $shadow-spread,
    $shadow-color,
    $position: relative
) {

    $shadow-size: $shadow-offset - calc($shadow-blur / 2) - $shadow-spread;

    $unitless-height: strip-unit($height);
    $unitless-shadow-size: strip-unit($shadow-size);

    $triangle__rect-size: sqrt(pow($unitless-height, 2) + pow($unitless-height, 2)) * 1px;
    $height__shadow: sqrt(pow($unitless-shadow-size, 2) + pow($unitless-shadow-size, 2)) * 1px;

    $height: $height + $height__shadow;

    position: $position;
    width: $height * 2;
    height: $height;
    overflow: hidden;

    &::after {
        position: absolute;
        top: 50%;
        left: 50%;
        width: $triangle__rect-size;
        height: $triangle__rect-size;
        margin-top: calc($height / 2);
        transform: translateX(-50%) translateY(-50%) rotate(45deg);

        background-color: $color;
        box-shadow: $shadow-offset $shadow-offset $shadow-blur $shadow-spread $shadow-color;
        content: '';
    }

}
